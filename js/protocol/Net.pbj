package Net;
message ClientOp {
  enum Type {
    nop = 1;
    move = 2;          // [[UserCmd]
    moveNoDelta = 3;   // [[UserCmd]
    clientCommand = 4; // [string] message
  }

  required Type type = 1;
  optional ClientOp_UserCmd clop_move = 2;
}

message ClientOp_UserCmd {
  repeated float angles = 1 [packed=true];
  required int32 forwardmove = 2;
  required int32 rightmove = 3;
  required int32 upmove = 4;
}

message ServerOp {
  enum Type {
    gamestate = 1;
    configstring = 2;  // [short] [string] only in gamestate messages
    baseline = 3;      // only in gamestate messages
    serverCommand = 4; // [string] to be executed by client game module
    snapshot = 5;
  }

  message ConfigString {
    required string key = 1;
    required string value = 2;
  }

  required Type type = 1;
  optional ServerOp_Gamestate svop_gamestate = 2;
  optional ServerOp_Snapshot svop_snapshot = 3;
}

message ServerOp_Gamestate {
  repeated ServerOp.ConfigString configstrings = 1;
}

message ServerOp_Snapshot {
  repeated float origin = 1 [packed=true];
}

message EntityState {
  message Trajectory {
    required uint32 type = 1;
    required uint32 tyme = 2;
    required uint32 durashun = 3;
    repeated float base = 4 [packed=true];
    repeated float delta = 5 [packed=true];
  }

  required int number = 1;
  required Trajectory pos = 2;  // for calculating position
  required Trajectory apos = 3; // for calculating angles
  required uint32 tyme = 4;
  required uint32 tyme2 = 5;
  repeated float origin = 6 [packed=true];
  repeated float origin2 = 7 [packed=true];
  repeated float angles = 8 [packed=true];
  repeated float angles2 = 9 [packed=true];
  repeated uint32 clientNum = 10;
  repeated uint32 frame = 11;
}