import os, fnmatch

Import('env')
Import('rglob')

CWD = os.path.abspath('.')
SRC_DIR = os.path.abspath(CWD + '/../lib')
BIN_DIR = os.path.abspath(CWD + '/../bin')

REQUIREJS_PATH = CWD + '/r.js'
JSHINT_CONFIG  = CWD + '/.jshintrc'

##
# Custom builders
##
EJS = Builder(
	action = """node -e "\
		var input = require('fs').readFileSync('$SOURCE', 'utf8');\
		var output = require('ejs').render(input, { filename: '$SOURCE'});\
		console.log(output)" > $TARGET""",
	suffix = '.tmp.js',
	src_suffix = '.ejs.js')

RequireOptimizer = Builder(
	action = 'node ' + REQUIREJS_PATH + ' -o $BUILD_SCRIPT name=$MODULE out=$TARGET')

JSHint = Builder(
	action = 'jshint $SOURCE --config=' + JSHINT_CONFIG)

env.Append(BUILDERS = {
	'EJS':              EJS,
	'RequireOptimizer': RequireOptimizer,
	'JSHint':           JSHint
})

##
# Targets
##
MODULES = [
	env.EJS(SRC_DIR + '/cgame/cg.ejs.js'),
	env.EJS(SRC_DIR + '/client/cl.ejs.js'),
	env.EJS(SRC_DIR + '/clipmap/cm.ejs.js'),
	       (SRC_DIR + '/common/asset-cache.js'),
	       (SRC_DIR + '/common/bsp-loader.js'),
	env.EJS(SRC_DIR + '/common/com.ejs.js'),
	       (SRC_DIR + '/common/cvar.js'),
	       (SRC_DIR + '/common/md3-loader.js'),
	       (SRC_DIR + '/common/qmath.js'),
	       (SRC_DIR + '/common/qshared.js'),
	       (SRC_DIR + '/common/skin-loader.js'),
	       (SRC_DIR + '/common/surfaceflags.js'),
	       (SRC_DIR + '/common/text-tokenizer.js'),
	env.EJS(SRC_DIR + '/game/bg.ejs.js'),
	env.EJS(SRC_DIR + '/game/gm.ejs.js'),
	env.EJS(SRC_DIR + '/renderer/program-builder.js'),
	env.EJS(SRC_DIR + '/renderer/program.js'),
	env.EJS(SRC_DIR + '/renderer/re.ejs.js'),
	env.EJS(SRC_DIR + '/renderer/script.js'),
	env.EJS(SRC_DIR + '/renderer/shader.js'),
	env.EJS(SRC_DIR + '/server/sv.ejs.js'),
	env.EJS(SRC_DIR + '/sound/snd.ejs.js'),
	env.EJS(SRC_DIR + '/system/browser/sys.ejs.js'),
	env.EJS(SRC_DIR + '/system/dedicated/sys.ejs.js'),
	       (SRC_DIR + '/ui/dom.js'),
	env.EJS(SRC_DIR + '/ui/ui.ejs.js')
]
AlwaysBuild(MODULES)

##
# Browser
#
# Aggregate all the dependent JS and run it through
# require's optimizer.
##
browser = env.RequireOptimizer(
	BIN_DIR + '/quakejs-browser-min.js',
	MODULES,
	BUILD_SCRIPT=CWD + '/browser.build.js',
	MODULE='system/browser/sys')
AlwaysBuild(browser)
env.Alias('browser', browser)

##
# Dedicated
#
# Same as the browser, but with a different require build
# script so that various client-specific modules get
# stubbed out
##
dedicated = env.RequireOptimizer(
	BIN_DIR + '/quakejs-dedicated-min.js',
	MODULES,
	BUILD_SCRIPT=CWD + '/dedicated.build.js',
	MODULE='system/dedicated/sys')
AlwaysBuild(dedicated)
env.Alias('dedicated', dedicated)

##
# JSHint
#
# We don't lint the individual files of a module,
# just the aggregate module.
##
jshint = [env.JSHint(x) for x in MODULES]
AlwaysBuild(jshint)
env.Alias('jshint', jshint)