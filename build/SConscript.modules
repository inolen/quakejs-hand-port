import os, fnmatch

Import('env')
Import('rglob')

CWD = os.path.abspath('.')
SRC_DIR = os.path.abspath(CWD + '/../lib')
BIN_DIR = os.path.abspath(CWD + '/../bin')
BIN_TMP_DIR = BIN_DIR + '/tmp'

INCLUDEJS_PATH = CWD + '/includes.js'
REQUIREJS_PATH = CWD + '/r.js'
JSHINT_CONFIG  = CWD + '/.jshintrc'

##
# Any module or file matches PROCESS_FILTERS
# will be preprocessed with includes.js.
##
MODULES = [
	SRC_DIR + '/cgame/cg.js',
	SRC_DIR + '/client/cl.js',
	SRC_DIR + '/clipmap/cm.js',
	SRC_DIR + '/common/com.js',
	SRC_DIR + '/game/bg.js',
	SRC_DIR + '/game/gm.js',
	SRC_DIR + '/renderer/re.js',
	SRC_DIR + '/server/sv.js',
	SRC_DIR + '/sound/snd.js',
	SRC_DIR + '/system/browser/sys.js',
	SRC_DIR + '/system/dedicated/sys.js',
	SRC_DIR + '/ui/ui.js'
]
PROCESS_FILTERS = [
	'/ui/views'
]

##
# Custom builders
##
RequireOptimizer = Builder(
	action = 'node ' + REQUIREJS_PATH + ' -o $R_SCRIPT baseUrl=$BASE_DIR name=$R_NAME out=$TARGET optimize=uglify')

JSHint = Builder(
	action = 'jshint --config=' + JSHINT_CONFIG + ' $SOURCE')

env.Append(BUILDERS = {
	'ExpandIncludes':   ExpandIncludes,
	'JSHint':           JSHint,
	'RequireOptimizer': RequireOptimizer
})

##
# Targets
##

##
# Preprocess all module JS, as well as any JS matching
# the PROCESS_FILTERS
##
all_js = rglob(SRC_DIR, '*.js', True, True, True)
vendor_js = rglob(SRC_DIR + '/vendor', '*.js', True, True, True)
project_js = list(set(all_js) - set(vendor_js))

##
# Browser
#
# Aggregate all the dependent JS and run it through
# require's optimizer.
##
browser = env.RequireOptimizer(
	BIN_DIR + '/quakejs-browser-min.js',
	all_js_processed,
	BASE_DIR=BIN_TMP_DIR,
	R_SCRIPT=CWD + '/browser.build.js',
	R_NAME='system/browser/sys')
env.Alias('browser', browser)

##
# Dedicated
#
# Same as the browser, but with a different require build
# script so that various client-specific modules get
# stubbed out
##
dedicated = env.RequireOptimizer(
	BIN_DIR + '/quakejs-dedicated-min.js',
	all_js_processed,
	BASE_DIR=BIN_TMP_DIR,
	R_SCRIPT=CWD + '/dedicated.build.js',
	R_NAME='system/dedicated/sys')
env.Alias('dedicated', dedicated)

##
# JSHint
#
# We don't lint the individual files of a module,
# just the aggregate module.
##
modules_processed = [src_to_build(x) for x in MODULES]
jshint = [env.JSHint(x) for x in modules_processed]
env.Alias('jshint', jshint)
env.AlwaysBuild(jshint)